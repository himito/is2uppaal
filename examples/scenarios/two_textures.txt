// Place template instantiations here.

// Event :
// event_t id, -> Event's identifier
// int dur, -> Date to trigger the event
// int val -> Message of the event.
startEvent = Event(0, 0, 1);


// Flexible:
// int dmin -> Minimum duration
// int dmax -> Maximum duration.
// bool finite -> Define whether the duration is finite or not.
// broadcast chan &launch -> Event to start the interval
// broadcast chan &start -> Event to start the children.
// broadcast chan &min -> Event to notify that the minimum duration has elapsed.
// broadcast chan &max -> Event to notify that the maximum duration has elapsed.
// broadcast chan &timeout -> Event to stop the interval.
// broadcast chan &stop -> Event to start the next interval.
// broadcast chan &skip_p -> Event to skip the interval
// broadcast chan &kill_p -> Event to kill the interval
// broadcast chan &skip -> Event to skip the next interval
// broadcast chan &kill -> Event to kill the children.
score = Flexible(0,0, false, event[0], startedTO[0], startC[0], maxDurationS[0], timeoutTO[0], stoppedTO[0], skippedC[0], null, skipC[0], null);


// Control :
// interval_t n, -> Number of preceding intervals
// broadcast chan &min, -> Event to notify that an intervals reaches its minimum duration
// broadcast chan &skip_p, -> Event to skip the interval
// broadcast chan &skip,  -> Event to skip the next interval
// broadcast chan &launch,  -> Event to start or stop the next interval
// broadcast chan &kill   -> Event to kill the interval
stopScore = Control(3, startC[0], skipC[0], skippedC[0], timeoutTO[0], null);


// Rigid :
// int dur, -> Duration of the interval
// broadcast chan &launch, -> Event to start the interval
// broadcast chan &start, -> Event to start the processes
// broadcast chan &stop, -> Event to stop the processes
// broadcast chan &skip_p, -> Event to skip the interval
// broadcast chan &kill_p, -> Event to kill the interval (sent by the father)
// broadcast chan &skip, -> Event to skip the next interval
interval_0 = Rigid(3, startedTO[0], startedI[0], stoppedI[0], skippedTO[0], killedTO[0], skippedI[0]);
box_1 = Rigid(4, stoppedI[0], startedTO[1], stoppedTO[1], skippedI[0], killedTO[0], skippedTO[1]);
interval_1 = Rigid(0,stoppedTO[1], startedI[1], startC[0], skippedTO[1], killedTO[0], skipC[0]);

interval_2 = Rigid(1, startedTO[0], startedI[2], stoppedI[2], skippedTO[0], killedTO[0], skippedI[2]);
box_2 = Rigid(5, stoppedI[2], startedTO[2], stoppedTO[2], skippedI[2], killedTO[0], skippedTO[2]);
interval_3 = Rigid(0, stoppedTO[2], startedI[3], startC[0], skippedTO[2], killedTO[0], skipC[0]);



// List one or more processes to be composed into a system.
system startEvent, score, stopScore, interval_0, box_1, interval_1, interval_2, box_2, interval_3;
